给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。

示例 1：

输入：nums = [1,1,2]
输出：
[[1,1,2],
[1,2,1],
[2,1,1]]
示例 2：

输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

提示：

1 <= nums.length <= 8
-10 <= nums[i] <= 10
通过次数172,828提交次数273,093

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/permutations-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

````java
class Solution {
    List<List<Integer>> res;
    //0说明还未添加 1则相反
    int[] vis;
    public List<List<Integer>> permuteUnique(int[] nums) {
        res=new ArrayList();
        vis=new int[nums.length];
        Arrays.sort(nums);
        dfs(0,nums,new ArrayList());
        return res;
    }

    void dfs(int i,int[] nums,List<Integer> temp){
        if(i==nums.length){
            res.add(new ArrayList(temp));
            return;
        }
        for(int j=0;j<nums.length;j++){
            //考虑重复序列
            if(vis[j]==1||(j>0&&nums[j]==nums[j-1]&&vis[j-1]==0)) continue;
            temp.add(nums[j]);
            vis[j]=1;
            dfs(i+1,nums,temp);
            //体现回溯
            vis[j]=0;
            temp.remove(i);
            //temp.remove(temp.indexOf(nums[j]));
            // 是错误的
            //因为存在多个相同元素，可能得到错误的下标
        }
    }
}
````