假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？

示例 1:

输入: [7,1,5,3,6,4]
输出: 5 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。 示例 2:

输入: [7,6,4,3,1]
输出: 0 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

限制：

0 <= 数组长度 <= 10^5

注意：本题与主站 121 题相同：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/

通过次数88,732提交次数139,857

来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

````java
//我的解法
//从最简单的想法：遍历数组，每到一个数就遍历它后面的数找到最大值然后相减
//到不是遍历到每一个数都需要找它后面的最大值
class Solution {
    public int maxProfit(int[] prices) {
        int result = 0;
        int maxIndex = findMaxNum(prices, 0);
        //不是每一次都要去找一次最大值
        for (int i = 0; i < prices.length; i++) {
            if (maxIndex < i) maxIndex = findMaxNum(prices, i);
            result = Math.max(result, prices[maxIndex] - prices[i]);
        }
        return result;
    }

    int findMaxNum(int[] prices, int index) {
        int resIndex = index;
        for (int i = index; i < prices.length; i++) {
            if (prices[i] >= prices[resIndex]) resIndex = i;
        }
        return resIndex;
    }
}

//大佬解法
//动态规划
class Solution {
    public int maxProfit(int[] prices) {
        int cost = Integer.MAX_VALUE, profit = 0;
        for (int price : prices) {
            cost = Math.min(cost, price);
            profit = Math.max(profit, price - cost);
        }
        return profit;
    }
}
````