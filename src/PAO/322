从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。

例如:
给定二叉树:[3,9,20,null,null,15,7],

    3

/ \
9 20 /  \
15 7 返回其层次遍历结果：

[
[3],
[9,20],
[15,7]
]

提示：

节点总数 <= 1000 注意：本题与主站 102 题相同：https://leetcode-cn.com/problems/binary-tree-level-order-traversal/

通过次数90,475提交次数132,036

来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

````java
//使用队列,一个HashMap记录每个Node所对应的层数  我的解法
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        HashMap<TreeNode, Integer> hash = new HashMap();
        if (root == null) return result;
        hash.put(root, 0);
        LinkedList<TreeNode> nodes = new LinkedList();
        nodes.addFirst(root);
        while (!nodes.isEmpty()) {
            TreeNode node = nodes.pollLast();
            if (result.size() < hash.get(node) + 1) result.add(new ArrayList<Integer>());
            result.get(hash.get(node)).add(node.val);
            //根据当前节点的层数去加入下一个节点
            TreeNode toAddNode;
            if (node.left != null) {
                toAddNode = node.left;
                hash.put(toAddNode, hash.get(node) + 1);
                nodes.addFirst(toAddNode);
            }
            if (node.right != null) {
                toAddNode = node.right;
                hash.put(toAddNode, hash.get(node) + 1);
                nodes.addFirst(toAddNode);
            }
        }
        return result;
    }
}

//
````