请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。

例如:
给定二叉树:[3,9,20,null,null,15,7],

    3
/ \
9  20
/  \
15   7
返回其层次遍历结果：

[
[3],
[20,9],
[15,7]
]


提示：

节点总数 <= 1000
通过次数75,621提交次数128,636

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

````java
//在此的基础上进行左右的判断 但因为过于冗余就不写了
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        HashMap<TreeNode, Integer> hash = new HashMap();
        if (root == null) return result;
        hash.put(root, 0);
        LinkedList<TreeNode> nodes = new LinkedList();
        nodes.addFirst(root);
        while (!nodes.isEmpty()) {
            TreeNode node = nodes.pollLast();
            if (result.size() < hash.get(node) + 1) result.add(new ArrayList<Integer>());
            result.get(hash.get(node)).add(node.val);
            //根据当前节点的层数去加入下一个节点
            TreeNode toAddNode;
            if (node.left != null) {
                toAddNode = node.left;
                hash.put(toAddNode, hash.get(node) + 1);
                nodes.addFirst(toAddNode);
            }
            if (node.right != null) {
                toAddNode = node.right;
                hash.put(toAddNode, hash.get(node) + 1);
                nodes.addFirst(toAddNode);
            }
        }
        return result;
    }
}

//这种解法和下面那种解法类似
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> res = new ArrayList<>();
        if(root != null) queue.add(root);
        while(!queue.isEmpty()) {
            LinkedList<Integer> tmp = new LinkedList<>();
            for(int i = queue.size(); i > 0; i--) {
                TreeNode node = queue.poll();
                if(res.size() % 2 == 0) tmp.addLast(node.val); // 偶数层 -> 队列头部
                else tmp.addFirst(node.val); // 奇数层 -> 队列尾部
                if(node.left != null) queue.add(node.left);
                if(node.right != null) queue.add(node.right);
            }
            res.add(tmp);
        }
        return res;
    }
}

//这种思路比较好理解
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> res = new ArrayList<>();
        if(root != null) queue.add(root);
        while(!queue.isEmpty()) {
            List<Integer> tmp = new ArrayList<>();
            //这里要注意用的是for循环而不能使用while(!queue.isEmpty())
            for(int i = queue.size(); i > 0; i--) {
                TreeNode node = queue.poll();
                tmp.add(node.val);
                if(node.left != null) queue.add(node.left);
                if(node.right != null) queue.add(node.right);
            }
            if(res.size() % 2 == 1) Collections.reverse(tmp);
            res.add(tmp);
        }
        return res;
    }
}
````