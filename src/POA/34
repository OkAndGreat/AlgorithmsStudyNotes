输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。

示例:
给定如下二叉树，以及目标和target = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
返回:

[
[5,4,11,2],
[5,8,4,5]
]


提示：

节点总数 <= 10000
注意：本题与主站 113题相同：https://leetcode-cn.com/problems/path-sum-ii/

通过次数88,100提交次数152,528

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

````java
//自己的解法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int index=0;
    List<List<Integer>> result;
    public List<List<Integer>> pathSum(TreeNode root, int target) {
        result=new ArrayList();
        List<Integer> toAddList=new ArrayList();
        if(root==null) return result;
        toAddList.add(root.val);
        recur(root,target,0,toAddList);
        return result;
    }
    void recur(TreeNode root, int target,int num,List<Integer> toAddList){
        if(root.val+num==target){
            result.add(toAddList);
        }else{
            if(root.left!=null) {
                toAddList.add(root.left.val);
                index++;
                recur(root.left,target,num+root.val,toAddList);
                toAddList.remove(index--);
            }
            if(root.right!=null) {
                toAddList.add(root.right.val);
                index++;
                recur(root.right,target,num+root.val,toAddList);
                toAddList.remove(index--);
            }
        }
    }
}
````