给定一个无重复元素的数组candidates和一个目标数target，找出candidates中所有可以使数字和为target的组合。

candidates中的数字可以无限制重复被选取。

说明：

所有数字（包括target）都是正整数。 解集不能包含重复的组合。 示例1：

输入：candidates = [2,3,6,7], target = 7, 所求解集为：
[
[7],
[2,2,3]
]
示例2：

输入：candidates = [2,3,5], target = 8, 所求解集为：
[
[2,2,2,2],
[2,3,3],
[3,5]
]

提示：

1 <= candidates.length <= 30 1 <= candidates[i] <= 200 candidate 中的每个元素都是独一无二的。 1 <= target <= 500
通过次数270,292提交次数372,989

来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/combination-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

````java
class Solution {
    List<List<Integer>> res = new ArrayList();
    int target;

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        this.target = target;
        dfs(candidates);
        return res;
    }

    void dfs(int[] candidates) {
        List<Integer> temp = new ArrayList();
        int value = 0;
        for (int i = 0; i < candidates.length; i++) {
            temp.add(candidates[i]);
            value += candidates[i];
            dfs(candidates, i, value, temp);
            temp.remove(temp.indexOf(candidates[i]));
            value -= candidates[i];
        }
    }

    void dfs(int[] candidates, int idx, int value, List<Integer> temp) {
        if (value == target) {
            res.add(new ArrayList(temp));
            return;
        }
        if (value > target) return;
        for (int i = idx; i < candidates.length; i++) {
            value += candidates[i];
            temp.add(candidates[i]);
            dfs(candidates, i, value, temp);
            value -= candidates[i];
            temp.remove(temp.indexOf(candidates[i]));
        }
    }
}
````